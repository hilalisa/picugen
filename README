Picugen is a cryptographic and non-cryptographic hash/checksum generator written in Go.
It can be used to easily obtain (optionally salted) hashes of strings and files produced
by a large variety of algorithms including MD5, SHA-1 and SHA-256.

Usage: ./picugen [-a <algorithm>] [-salt <salt>] [-s <string to hash>] / <file(s) to hash>

Examples:
  ./picugen -a md5 document.txt                Generate MD5 hash of a file
  ./picugen -a md5 *                           Generate MD5 hash of all files in folder
  ./picugen -a sha1 -s hello world             Generate SHA-1 hash of a string
  ./picugen -a sha1 -salt s4lt -s hello world  Generate salted SHA-1 hash of a string

Available algorithms (default is MD5):
  adler32         Adler-32 checksum (RFC 1950)
  crc32           32-bit cyclic redundancy check (CRC-32) checksum (defaults to IEEE polynomial)
  crc32castagnoli CRC-32 using the Castagnoli polynomial (0x82f63b78)
  crc32ieee       CRC-32 using the IEEE polynomial (0xedb88320)
  crc32koopman    CRC-32 using the Koopman polynomial (0xeb31d82e)
  crc64           64-bit cyclic redundancy check (CRC-64) checksum (defaults to ISO polynomial)
  crc64ecma       CRC-64 using the ECMA polynomial (0xC96C5795D7870F42)
  crc64iso        CRC-64 using the ISO polynomial (0xD800000000000000)
  fnv             FNV-1 non-cryptographic hash (defaults to fnv32)
  fnv32           32-bit FNV-1
  fnv32a          32-bit FNV-1a
  fnv64           64-bit FNV-1
  fnv64a          64-bit FNV-1a
  hmac            Keyed-Hash Message Authentication Code (HMAC) (requires -k <key>) (defaults to SHA-256)
  hmacmd5         HMAC using MD5 (requires -k <key>)
  hmacsha1        HMAC using SHA-1 (requires -k <key>)
  hmacsha256      HMAC using SHA-256 (requires -k <key>)
  hmacsha512      HMAC using SHA-512 (requires -k <key>)
  md4             MD4 hash (RFC 1320)
  md5             MD5 hash (RFC 1321)
  ripemd160       RIPEMD-160 hash
  sha1            SHA-1 hash (RFC 3174)
  sha224          SHA-224 hash (FIPS 180-2)
  sha256          SHA-256 hash (FIPS 180-2)
  sha384          SHA-384 hash (FIPS 180-2)
  sha512          SHA-512 hash (FIPS 180-2)

Note: For complex strings, put the string in a file, then run Picugen on
      the file. (Don't add newlines to the file as they will alter the output.)

Sample output:

# ./picugen /bin/bash
3a12472dee4ed695084c2582240a83ad  /bin/bash

# ./picugen -a sha256 -salt s3cr3t -s p4ssw0rd
bcd4a8f23d02931039f0296ca6164f3942b1629b12001bc8e6ffec4df8884848

# ./picugen -a sha1 /etc/*.conf
432e7ce0f184473bc4f2ffaba60c3582fb06121a  /etc/adduser.conf
693d52ebfb7bb7c4e7c67e7152feaec725ac3794  /etc/blkid.conf
97d3924e88f179534cb79bb40c374cd6436c0827  /etc/ca-certificates.conf
d0f08b9c8893167ab7892c62a3bc6e48cdf3f20d  /etc/debconf.conf
e79074abdca16eb19b9cd545f2ceaa995dccb062  /etc/deluser.conf
b2f44e98d8c6752d216ab560185db31fc2f1f07c  /etc/ffserver.conf
0a483a8608ea8a98eb0ecc310a728d6d383667d4  /etc/gai.conf
0dbc5f9198afc53df95e4b9bcbfcb4d8e05ee264  /etc/hdparm.conf
7be0c4f402d2c0e120e1be86ffb86c8490b091a4  /etc/host.conf
83488da9c2c70fa4354abc2623fba9bb64f80433  /etc/insserv.conf
b355a92a0cdd2a797a7b75c981d7e3df702ec937  /etc/kernel-img.conf
1ee9db344f9be0c9891dd767de02781dad0f28fb  /etc/kerneloops.conf
addee0472ac552e7c43db27234ee260282b9b988  /etc/ld.so.conf
...